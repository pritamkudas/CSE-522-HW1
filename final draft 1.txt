
// CSE 522: Homework 1, Part 1

class BST_Part1 {
	public static void main(String args[]) {
		 Tree tr;
		 tr = new Tree(100);
		 tr.insert(50);
		 tr.insert(125);
		 tr.insert(150);
		 tr.insert(25);
		 tr.insert(75);
		 tr.insert(20);	
		 tr.insert(90);
		 tr.delete(20);
		 tr.delete(20);
		 tr.delete(150); 
		 tr.delete(125);
		 tr.delete(100);
		 tr.delete(50);
		 tr.delete(75);
		 tr.delete(90);
		 tr.delete(25);
		 
			
	}
}

class Tree { // Defines one node of a binary search tree
	
	public Tree(int n) {
		value = n;
		left = null;
		right = null;
	}
	
	public void insert(int n) {
		if (value == n)
			return;
		if (value < n)
			if (right == null)
				right = new Tree(n);
			else
				right.insert(n);
		else if (left == null)
			left = new Tree(n);
		else
			left.insert(n);
	}

	
	public Tree min() {
		// returns the Tree node with the minimum value
		// you should write the code
		
		if (this.left == null)
			return this;
				
		return this.left.min();
		
	}
	
	public Tree max() {
		// returns the Tree node with the maximum value
		// you should write the code
		if (this.right == null)
			return this;
		
		return this.right.max();

	
	}
	
	
	public Tree find(int n) {
		// returns the Tree node with value n
		// returns null if n is not present in the tree
		// you should write the code
       // Tree parent= this;
       Tree parent= this;

 		while (parent.value != n) {

 			if (parent.left == null && parent.right == null)
 				return null;
 			else if (parent.left == null && parent.value > n)
 				return null;
 			else if (parent.right == null && parent.value < n)
 				return null;
 			else
 			{
 			if (parent.value > n && parent.left != null)
				parent= parent.left;
 			else if (parent.value < n && parent.right != null)
				parent= parent.right;
 			if (parent.value == n)
				return parent;
			}
 		}
 		return parent;
      
	}
	
	public void delete(int n) {  
		Tree t = find(n);

		if (t == null) {  
			// print out error message and return
			System.out.println("The value "+n+" is not in the tree");
			return;
		}
		if (t.left == null && t.right == null && t != this) { 
			// do case1 and return
			t.case1(t, this);
			System.out.println("Deleted node with value "+t.value);
			return;
		}
		if (t.left == null || t.right == null) {  
			if (t != this) { 
				// do case2 and return
				t.case2(t, this);
				System.out.println("Deleted node with value "+t.value);
				return;
			} else {
				// do case3 and return
				if(t.left == null && t.right != null)
				{
					t.case3(t, "right");
					System.out.println("Deleted node with value "+t.value);
					return;
				}
				else if(t.right == null && t.left != null)
				{
					System.out.println("Deleting root node with value "+t.value);
					t.case3(t, "left");
					return;
				}
				else
				{
				    System.out.println("Cannot delete "+t.value+" as tree cannot be empty");
				    return;
				}
				
			}
		}
		// do case3 and return
		t.case3(t, "left");
	}
	
	private void case1(Tree t, Tree root) {  
        Tree temp = root;
        	
       		if(temp.left != null && temp.value > t.value)
				case1(t,temp.left);
			else if (temp.right != null && temp.value < t.value)
				case1(t,temp.right);
			
       		
			if(temp.left != null && temp.left.value == t.value)
				temp.left = null;
			else if (temp.right != null && temp.right.value == t.value)
				temp.right = null;
		
	}
	
	private void case2(Tree t, Tree root) {  

        Tree temp = root;

        if (t.left != null && temp.right != null && temp.right.value == t.value)
		{
			temp.right = t.left;
			return;
		}
        else if (t.right != null && temp.right != null && temp.right.value == t.value)
		{
			temp.right = t.right;
			return;
		}
        else if (t.left != null && temp.left != null && temp.left.value == t.value)
		{
			temp.left = t.left;
			return;
		}
        else if (t.right != null && temp.left != null && temp.left.value == t.value)
		{
			temp.left = t.right;
			return;
		}
        
   		if(temp.left != null && temp.left.value > t.value)
			case2(t,temp.left);
		else if (temp.right != null && temp.right.value < t.value)
			case2(t,temp.right);
		
	
	}
	
	private void case3(Tree t, String which_side) {  
		// which == "left" or which == "right"
		String which = which_side;
		Tree temp;
		int tempval;

		if (which == "left")
		{
			temp = t.left.max();
			tempval = temp.value;
			t.delete(tempval);
			t.value = tempval;
		}
		else
		{
			temp = t.right.min();
			tempval = temp.value;
			t.delete(tempval);
			t.value = tempval;
		}
 	}

	protected int value;
	protected Tree left;
	protected Tree right;
}

























